// telemetry.rs â€” data ingestion service
use chrono::{DateTime, Utc};
use serde::{Deserialize, Serialize};

#[derive(Debug, Serialize, Deserialize)]
pub struct Reading {
    pub station_id: String,
    pub recorded_at: DateTime<Utc>,
    pub metrics: Vec<f32>,
}

impl Reading {
    pub fn normalize(&mut self) {
        let max = self.metrics.iter().cloned().fold(f32::NAN, f32::max);
        if max.is_finite() && max > 0.0 {
            for value in &mut self.metrics {
                *value /= max;
            }
        }
    }

    pub fn annotate(&self) -> String {
        format!("station: {} | samples: {}", self.station_id, self.metrics.len())
    }
}

#[tokio::main]
async fn main() -> anyhow::Result<()> {
    let mut reader = telemetry::stream("wss://edge.router.local:7443").await?;
    while let Some(mut reading) = reader.next().await {
        reading.normalize();
        tracing::info!(%reading.station_id, %reading.metrics.len(), "received reading");
        storage::persist(reading).await?;
    }
    Ok(())
}